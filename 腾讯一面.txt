腾讯一面.mp3
说话人1 00:02
行，然后你现在是毕业以后直接在北北会去开始实习吗？还是说正式的？工作
说话人2 00:09
不是实习？
说话人1 00:11
我理解你不是毕业了吗？应该是直接找正式岗就好了，为什么是一个实习的岗位？
说话人2 00:17
因为我之前在美国找实习的时候没有找到，然后我的简历里面就没有实习经验，然后找正式的时候就不太好找，所以就先找一段实习。
说话人1 00:29
好，也就是说你其实不想留在委员会是吧？想混一个实习经验之类的东西，然后后边的话再想找工作，是这个意思吧？
说话人2 00:37
对，如果满意的话考虑留下来的。因为唯品会在天津那边，然后我想去江浙沪或者是珠三角。
说话人1 00:50
Ok江浙沪说你现在实习我看应该有5个月，到现在应该8个月了，对吧？也一直在吧？
说话人2 00:58
没有5月就结束了。
说话人1 01:01
你现在在干啥？
说话人2 01:04
我现在在找工作，因为我我家里有点事情，然后就没有继续没有留住保证，
说话人1 01:13
所以你后边的话不也跟他后来有留用你吗？还是说你自己又就主动离开了？
说话人2 01:20
是有可以转正，但是是在天津，我个人不太想待在天津。
说话人1 01:26
懂了ok吧？行，我们今天的话先做一个笔试，然后后边的话再看一下你的简历方面的一些事情。

我这样我在代码考核这个地方出个题，好
说话人2 01:40
的，今天是只有笔试没有就是8股的吗？
说话人1 01:48
也不叫8股，过一下你的简历应该是有的，就看你笔试的结果。笔试是第一关，

 Ok，这样是不是？好，你看你能不能看到这个题，
说话人2 02:07
我好像还看不到，
说话人1 02:12
就一个题干大数的10进制二进制输出，我在代码考核那里我好像
说话人2 02:22
看不到，
说话人1 02:24
代码考核这个地方点进去了
说话人2 02:27
吗？我点进去了，它只有一些注释，
说话人1 02:31
旁边在
说话人2 02:33
左边好像点不进去，
说话人3 02:36
谁知
说话人1 02:37
这样你重新退出去，再进来再看看，
说话人2 02:41
好的，我刷新一下页面可以
说话人1 02:46
吗？

可以。
说话人3 02:50
谁知我发的
说话人2 03:01
你还是看不到，只能看到一些注释。
说话人1 03:06
没事吧，你就听听这个题本身就是大数的10进制，然后转二进制输出这个题就是大数的话最大能到它的64次方以上，就这么简单的一个东西。
说话人3 03:30
谁知到
说话人2 03:33
不好意思，我推一下微信，我再推一下c不好意思。
说话人3 03:44
他说我在想询问好多影响要面对的，谁知我就说谁知谁知谁知好，我也不知道你们的法律的情况，可能就是这样的。数据。好的情况。

对，应该是3月份，谁知我们说包括比如说发展方面，我们先去投了一个现在数据市场不同的学会这个事情，或者是学一个前面的数据，然后也好多少关心是只要你城市的有限，一定是一样的一致的，不会脱贫不行完成一组内容，不会这样的。

对，
说话人1 04:52
那题目能看到了吗？
说话人2 04:58
还是不可以？
说话人1 05:00
你直接做，你应该可以直接在上面写了，
说话人2 05:03
是的。我在4号楼到4号楼去可能需要演算一下，
说话人1 05:10
我
说话人3 05:12
想去了，现在可能没什么问题，特别踏实的问题。它这个规划但是实际上是非常重要的指示进行的，谁知但是你这不是他的，其实不一定的，然后他申请了哪种泡面，刚才提示你，现在如果团队的话，一定还是电子公司给我的。第二种把基本的然后他又大大的数据之后，我写的这个不是这样的，一个人说对这个点很奇怪的，他的说法就是说可能研究到了下一个点，他的应该是没有打开，现在的然后配合得好。

他是这样的，你刚才讲的吗？谁知是否现在肯定会员的，我想进一步要，谁知不好意思就开始我把它们通通好，所以整个家里面的就是这种谁知而且解除这种质押也不是意思，这是我们的谁知。

而且通过具体数据出来了的，然后他就这一点让你看看好吧，谁知这怎么做能力不平的情况，我觉得要把你不要只能放到这个数据。

这样子的话，因为我们就是这样解决，有以后但是没有这个内容。不要的是吧？他已经这样子的话，这个意思正好是80 7月份。好的好谢谢。我没有你没有给权限，你没有给权限，你为什么
说话人2 07:15
要请问这个输入是一个字符串还是一个就是数字呢？
说话人3 07:21
周转。我知道你知道安全的这些都是要做的，其实他完了我们就比较好几个事情，因为有些自己的这样的号码，大家的数据让这些都是吃饭时限是在后面又在后面，时间谁知下一个用户同样需要考虑这个就好了，30页应该很好，但是你可以直接看到的话了，时间问题，只要我只是86遇到了法律法规50块钱1万，谁知因为我们知道谁知你说如果是有差异的，我们利用一下我们的工作，我们已经申请了这个的话，可能好好的马上给我，我这边要给你时间，谁知谁知反正只要看到可能也知道了。

没错，这样我这边也可以不要，然后我现在支持那个的是我觉得路子的时候需要走进法律领域是不够的，他们的时候反正是的，这次我觉得不错，应该我们需要做什么事情。现在你看你谁他说的，因为我们正在我现在干什么，在那个当中的阶段就是他分开的，当时这里的版本号那个信息我要创造一个力量，你说在咱们的插件里面里面处理一个公司的位置，应该说当然没办法不错。

是的，其他的问题，因为我们的一些，所以这种国家的还没有谁知。谁知然后谁知好我们就让他去，我就把他也看不到。谁知时间了。谁知也就是说现在谁知其实其他的文件应该也用到了，但是用不到我们的水分又给他。

是问题让我们开始不一样，知不知道我的观察，在这里做之前报备，我以前有一个调查都有了好，谁知这个行情的差不多，你现在是把我们现在公司的钱了，签名的差距之后，到社会这样的不相同的事情，好像报纸我跟他的可能必须要进行走出来之后，可能另外一种情况好，数据实际上我们内部，但是里面东西这些里面就对这个就到一直想搞的这种加到系统的事情还没有。

加盟话其实也变化，但是不一样的，谁知我觉得我在他经常的，谁知我觉得我们跟前段这个问题考虑这个问题是我觉得ok的话，他自己的想法的的膏蟹万一万一谁知因为我们确定他有没有。

好，你拿到之后才判断不是的，你不是说你测完会，如果你这不是说得占用精神方面的人里面不是这个是吧？你们这边一般不好意思，数据就说白了就是爱解决照片问题等等给他这样的交流。谁知有什么样的数据？因为本来就没有那一定的效果，然后他来说大家的话，谁知谁知我可能会变化，有些1米7这个都是可以的。

开始的，谁知我看首先我后台是把所有人的照片，然后我们这种把那些有道理的东西，我把这个剧用实验相似的东西发到这里，他在那边切位置，要把这样一个好的没得到对吧？好吧就是这个问题。自家玉米也被放了，谁知谁知谁知数据测试的时候，然后这个问题的话，我们提高那些我看我不敢去，包括行太多了，没有准备的东西。

谁知你三要准备三，然后准备三个操作的这种方面的问题。谁知谁知
说话人2 14:18
我先说一下思路，面试官
说话人1 14:24
其实这个题思路也比较简单，你现在是直接做看能不能做得出来，
说话人2 14:33
ok。
说话人3 14:38
是好好。谁知谁知一样，谁知错了，一个成功了，谁知谁知道好的很不了解，谁知我都没有问题，谁知谁知我们主要是告诉谁知情况，谁知两个包子他不说了，好好谁知谁知谢谢。

谁知。谁知好的，谢谢。谁知数据数据。谁知这个不是光的这样好好。谁知这个数据发布的内容这种事情是有这样的话这个问题谁知这里应该不可能有效率，谁知谁知谁知好好谢谢。好好谁知。谁知谁知非常好的情况。数据。谁知数据我觉得谁知好好正常，谁知谁知谁知应该属实，谁知这样没有完全的好说话了，谁知谁知活动我也不太确定，我都是直接从这里拿数据，没有专业的。

谁知可以，但是你这个我们目前就是公交与合同发生的概念，如果尽快给你从方案在里面，我也不知道你怎么办，比如说代码发生了以后，你的消息多了一部分对不对？还有一部分怎么去搞，你就用你的代码要确认一下这个是吧？

是上次休息一般，然后是中秋，然后希望各位专家来好好，所以我们谁知没有问题，但是这里的赛的高度你要把它给挂上去，内容销售部位部分要把它分出来，你把这些说一下，这个就是产品的产品，让我自己停车，谁知谁知差不多了，产品我看一下，谁知谁知参与了之后，虽然一段写他的开始保险公司应该把你看这个月给你发现还有什么？

这个关键现在把我们合适的问题是不是里面注意说我刚才对销售的里面已经揭开利息需要18%，达到了100万差距，就是可以谁知30度，谁知谁知对，你因为写了动画的超时，你现在很明确没有什么，目前营销的话是相互推广目标的发展，教育的发展是内部的一种的方式，领导安全里面，但是要用好小心，还有自交文化处。
说话人2 21:51
你好，我好像写完了。
说话人1 21:54
你看调试一个123456789，
说话人3 22:03
所以你的终端建设为什么管理概念？那么现在为了要加入快点，谁知这一块你可以
说话人1 22:21
直接的扣的写在代码里，对。
说话人3 22:25
目前我们把这一块这出来明白的事情先熟悉一下，不要而且我们可以帮助最关键的安排，关键的方法就是他们的产品，按照时间到这里宣传开发，谁知快快一点，
说话人2 22:42
等一下有异常我看一下，
说话人3 22:44
从这个过程的希望在，但是又把企业加入这样的，反正刚才把这个方面最重要的是采购专门的技术的方式做的，具体的确实钱不清楚的，其实在这上面的时间分类情况。好好谁知那一个你怎么不他技术高的过程。
说话人1 23:16
你这个地方我看你这么写的话，它如果超过二的64次方，你这咋整？
说话人3 23:22
他
说话人1 23:25
现在是存不下的，
说话人3 23:27
那么我们现在他们那边有没有时间对其他业务线上就行了，谁知
说话人2 23:39
我再思考一下，我
说话人3 23:41
不知道

他不知道他目前没有这么快的稍微多一点问一下，说差不多后面后台这边拿了一个去看看去了，快乐一下，只要我们确实包括谁知平台的基本概念，还可以知道越发的社会企业是吧？

谁知好。这好，我觉得这样基本上没有使用巨细胞再说一下去之前的这么快，就在他们现在依然那里去，他已经你的做法就是说原来的时候要都在主动吗？其余的还有什么问题？看一下数据不错。这块用户是吧，快点告诉就是说让你这种情况提供了一个其他的目标，应该具体的高度考虑问题，知道问题不一样。

中国广告的规定他怎么样？之前消息给他500怎么样了吗？今天这个数据方案怎么样了？谁知谁知考虑之前其实谁知之前的消息里面的东西，那么中方从哪里数据过程完全于企业的继续保持了战略区域的平台。谢谢。去年的基础，谁知你说这些有效发展。好好谢谢，然后我谁知谁知我知道他自己，但是对于做的就是结构，我们的结构比较忙是吧？对。数据没有把这些东西给你发到网上，谁知咱们不要思考这个问题。

这个工具说了这个迹象情况是什么？他说是他的产品，要不然我把目光就真正他们这边就要然后检查的第三这个问题产品，才能说是人家的结果，还要看三周就开始接触渠道，或者移动我怎么这样出来了，这个企业开始项目的，就是说晚上再过来一下，在这里调查了。

知道要知道。对，但是你说什么让你来给他们这个市场，因为连接一下，谁知大家对他的问题分析一下，为什么不可能谁知，然后基本上也是对一个也是指意图吗？也是稍微发了一个内容吗？谁知但是把他控制一下生产这边看看谁知道。好。数据好好，谢谢。谁知推荐体系推荐他推荐其实也是状态，谁知谁知，谁知。

好的，谢谢，首先表态就单独搞了一个aes的，然后应该是我们开场的方式不一样的，原则求发给你，这就是在这样形成一种怎么样？他是默契的走错了，经过期待的没关系。数据。
说话人2 28:56
您看一下。
说话人1 28:58
不好意思，我刚刚去喝水了，怎么样搞完了
说话人2 29:02
没事。我有一个结果，但是我没有办法验证这个结果对不对？
说话人1 29:08
我看你怎么实现的4周。
说话人3 29:20
我的理解就是说按照我个人有一些一分不需要在原来一组的方案说什么，因为
说话人1 29:34
 Ok你的结果你可以拿计算器，你直接拿自己的计算器去看一下这个结果就好了。
说话人2 29:43
这个好像
说话人3 29:45
原色也不是同样，
说话人1 29:47
计算器不是可以直接转吗？
说话人2 29:50
太长了，我我可以直接就丢到浏览器里，让浏览器帮我算一下
说话人3 29:58
吗？不需要算了，
说话人1 29:59
我帮你看看，
说话人3 30:02
你去看现在有多
说话人1 30:05
结果应该是对的，我再看一下你的视线，
说话人2 30:13
然后加上这一行就好了，加上这一行是因为他之前的外部循环可能会导致那么是空，然后为空了就说明那么是0，然后就直接退出
说话人3 30:24
住这边，所以说不能慢慢的确认一下。
说话人1 30:29
Ok。问题不大，行，我们再聊一聊你的简历。
说话人2 30:35
只有一道吗？
说话人1 30:38
对，你想再来一道吗？
说话人2 30:39
不想，
说话人1 30:41
我
说话人2 30:42
是刷题刷的头疼，
说话人1 30:45
我看你是首先220年毕业之后，然后21年才入的职。你中间一年是去干啥了？
说话人2 30:55
我之前是考华中科技大，然后被调剂了，
说话人1 31:00
然后又重新考了一年，然后这是怎么样，
说话人2 31:03
然后申请出国了。
说话人1 31:06
中间一年这一年主要是在读预科吗？还是怎么样？
说话人2 31:13
是的。在国内上预科就是上完预科就到了那边就不用再读语言班了。
说话人1 31:24
了解互联网。行，我们主要聊一下你唯品会这块经历。你唯品会这边的话，我看实习了大概5个月，然后做了这个项目，你能大概表述一下是干啥的吗？
说话人2 31:40
好的，这个项目大概是一个规则引擎，然后它主要的作用目的就是为了把业务模块里面的就是一些规则判定，它不好意思，因为他业务判定是硬编码在业务逻辑里面之前，然后我们做的就是为了把它从一边把它解放出来，然后用一个规则脚本的形式放在一个规则引擎里面，然后就等其他业务系统来调用我们。
说话人1 32:21
怎么来解释这个规则引擎，你能举几个例子吗？
说话人2 32:25
可以的。我再详细介绍一下它的背景，然后

为了从一边把你解放出来，然后他这是他的业务背景，然后他其实还有一个技术背景，然后他技术背景，第一个是他业务和技术耦合了，然后他第二个就是这个东西比较难使用，它出错率比较高。

然后

我们对接的业务有有几个4个，有积分系统，然后有风控系统，然后有有告警系统，然后还有一个权限系统，然后比如积分系统告警系统，它自己去实现这么一个逻辑复杂的这么一个组合，他们维护起来就比较困难，然后有规则引擎之前，各个平台各个系统他自己去玩，自己去写这些东西，然后再有了这个规则引擎之后，我们就会把这个规把把这些规则它抽到这个规则引擎里面去，规则引擎这个系统里面来，然后让这些业务系统来对接这个规则引擎，然后这些业务系统它就不用去关心底层的实现了。

可以，
说话人1 33:47
你比如说是积分规则，比如说什么，比如说我做某一个动作，连续做两次加多少分，连续做三次只加多少分，你遵守吗？
说话人2 34:01
类似我们的是比如它会积分系统它会去监听用户的交易，然后如果交易发生了之后，规则引擎就会根据匹配到的规则，还有实时数据，然后去进行一些积分的计算，比如消费规则满100就积一分，然后这个就是一个积分系统的大概的样子，然后计算完成之后，积分就会结果积分变动的结果就会去更新到用户的积分余额里面，然后去记录积分变动的信息。

然后在告警系统里面，比如说
说话人3 34:41
一般这种
说话人2 34:43
大型公司里面都会有监控系统来监控服务的健康状况，比如业务接口的响应时间，比如有一些性能指标，有什么 Cpu，然后有什么内存，然后我们就可以把这些数据采集出来，不是我们是业务是告警系统，它去把这些数据采集出来，然后比如说它有百分 CPU占用率80%，然后他就要去做一个告警的操作，他就会把把这些数据采集出来之后，他就会去看有没有到达某个阈值，如果达到了这个阈值，我们就要去做告警的一个动作。

然后告警的动作有各种各样的，比如说发信息
说话人3 35:26
打
说话人2 35:26
电话，然后发微信之类的，然后上个系统采集到的数据丢到我们规则引擎，然后我们规则引擎会去做一个匹配，根据之前制定的规则去做一个匹配，然后告诉他匹配上了还是没有匹配上。
说话人1 35:41
对本身你这个系统你觉得你自己负责哪一块，然后你自己比如说做这块的时候有没有发现一些问题，或者说你自己工作中有没有什么亮点？
说话人2 35:56
是有的。我之前做的有几个功能，然后有一个是业务回调，然后他在业务回调好像是
说话人3 36:12
我
说话人2 36:13
记得问题比较清楚的是归版本管理这块，然后版本管理它首先它有一个版本号的问题，然后他它是一条规则存在它的数据库里面，然后它会根据前端人员去配置一些规则，然后它更新到我们的包装引擎里面。

然后它每次更新同一条规则的话，它因为我们在数据库的表里有一个版本号，然后他经常会去更新的话，那就有一个版本冗余的问题，
说话人3 36:49
然后
说话人2 36:50
他它有很多个版本的话，它也就是存的数据比较大，然后它包括保留之前的版本也没有什么必要，然后我们就会去进行一些版本删除的操作。

那就是冗余删除，
说话人3 37:11
然后
说话人2 37:13
冗余删除。因为我们是那个服务器是有5台，然后他可能会有一些并发删除了，有有一个可能会几有并发删除的问题，可以这么说。然后我们就会通过一个 Ready来实现的分布式锁，然后分布式锁来实现单击删除的能力，谁抢到了这把锁谁就删除这条规则。
说话人1 37:46
我看你用的是乐观锁，乐观锁里边有强就没有强锁这个机制，
说话人2 37:52
不这个是冗余删除，不是乐观所，并发修改是乐观所，
说话人3 38:00
我告诉你慢慢的研发的
说话人1 38:03
并发修改是乐观的，

你都说删除的时候，有人删除的时候，你就找一个主节点去抢抢这个东西
说话人2 38:16
是不是？
说话人1 38:16
对是的，抢到了然后就删是吧？对。你在抢主节点的时候会遇到什么问题没有？你自己加这算是分布式锁，分布式锁的话你自己有在加的时候有什么问题，
说话人2 38:38
他可能会挂掉，然后我们就会设置一个过期时间，然后再来让他如果拿到锁挂掉了，那不行，肯定让他过期的时候就把锁释放掉。
说话人1 38:52
还除了这个以外，还有没有别的问题？
说话人2 38:59
还有并发修改的问题，就是我们通过一个cas的思想来实现了并发修改，因为它的并发度不高，所以我们没有实现，我们就没有用枷锁这种方式。
说话人1 39:15
比如说你刚刚回定义删除，你有过期时间吗？你的过期时间要定多久？
说话人2 39:23
大概是10秒。
说话人1 39:26
10秒，你怎么定这个10秒，你是根据什么用来做？

定成10秒这个时间，
说话人2 39:33
因为他拿到锁删除这个操作也很快，然后他剩余的时间就来做一些容错，
说话人1 39:48
但是有没有可能说它超过10秒的
说话人2 39:51
一般不会，
说话人1 39:55
如果超过的话会怎么样？
说话人2 39:59
超过了的话，超过
说话人1 40:03
了你这个系统，你会穿透你这个系统能力吗？会导致不可挽回的错误，
说话人3 40:12
好。
说话人2 40:12
应该是不会的，我们没有可我负责，我没有考虑到这么多，他一般来说是可能一秒内就结束了。但是我为了保证什么容错，然后就多设置了一点时间。
说话人1 40:28
比如说他这个删我的记得版本号，比如说他也是根据自这个版本号到底长还是短来看，就有可能他已经存了11万个版本了，那删就会慢，
说话人2 40:41
每天我们会有一个定时任务，然后在spring里面它有一个注解 around，然后他每天去执行，到点就去查询一下，比如说
说话人1 40:59
电影任务好久没跑了，好久没跑了，就不知道什么原因挂掉了，然后你现在要把它提起来的时候没有问题，
说话人2 41:09
提起来的时候可能会启动
说话人1 41:10
起来了，
说话人2 41:11
可能会有问题，
说话人1 41:14
启动起来就存得很长了，所以你想一下它如果真的超过10秒，对于你现在这个机制来说，会不会有问题，还是说没有问题？
说话人2 41:24
可能会有问题，他删到一半了之后，他锁就被释放掉
说话人1 41:35
了，然后
说话人2 41:37
然后导致它版本号还是很长，冗余的问题没有解决。
说话人1 41:47
下边不是还会再去抢吗？
说话人2 41:50
下面的那是第二天的事情了吧？
说话人1 41:55
你一天执行一次是吧？
说话人2 41:57
对，
说话人1 41:58
然后一次执行10秒钟。
说话人2 42:00
是的，
说话人1 42:03
你这是相当于说针对全局的版本全上一遍是吧？
说话人3 42:10
对。
说话人1 42:10
你怎么知道你这个版本这个我理解是这个应该是个什么维度，业务维度对吧？每个业务都有一个版本号对吧？还是说每个规则都有一个版本号？
说话人2 42:23
每个
说话人1 42:23
规则都有个版本号，对
说话人2 42:25
是的，每个规则都有一个版本号。
说话人1 42:27
如果这个规则比如说有100万个规则了，你是要删不完了。
说话人2 42:33
一般来说我们是没有这么多规则的，因为
说话人1 42:38
是这只是刚做，但你你不希望他做，跑个半年就重构了，你要考虑
说话人2 42:47
是但是我也没有经验，我不太清楚你
说话人1 42:53
想假如说你现在比如说你现在有很多的这种东西，然后你觉着你应该怎么改的？

我理解你现在做的就是我一天删一次，一次就删，这10秒钟一下就完了对吧？对那好，现在就变成了你版本太多了，就删我一次删不完你要怎么办？
说话人3 43:22
然后
说话人2 43:24
那就给这个时间设置的长一点，然后他包括如果这个任务没有完成的话，就通过一个设置一个守护线程来延长锁的持有时间，
说话人3 43:40
也可以开展平台，
说话人1 43:42
那就变成从原来一次变成调用多次了，对吧？

对。调用多次是怎么个调调用多次法呢？是一一直轮巡还是怎么着？
说话人2 44:01
也是定时。
说话人1 44:04
好，你说一下怎么定时？
说话人2 44:07
设置一个时间，因为这个时间我没有实际用过也不太清楚，但是反正要设置一个时间，然后通过一个守护线程去看主线程它有没有完成任务，他如果完成任务的话释放锁，如果他没有完成这个任务，守护先生就会去申请一个他所的长久一点。

再申请一段时间就是不释放这个锁。
说话人1 44:39
你怎么知道他已经删到哪儿了，你怎么知道他已经遍历到哪儿了？

现在有100万个，你肯定一开始只遍历一点点，删这一点点，你怎么知道哪些删过，哪些没删过，
说话人2 45:01
可能就还是要进行一些circle的查询。
说话人1 45:09
怎么
说话人3 45:10
说
说话人2 45:12
查最近的守护县城去，就是查这个版本号，如果查到大于10条的话，他就不是上一个锁，
说话人1 45:30
每次我每次都是从头遍历

是不是有点浪费？是的。
说话人2 45:50
但是这个断点续传我不太会实现，我不知道它是怎么实现的。
说话人1 45:57
你记一下当前做哪个业务不就行了吗？做到哪个规则了？
说话人2 46:05
不可以吗？Ok可以，每隔几百毫秒就去记录一下，删到了第几条版本号，
说话人1 46:15
第几条版本，第几个规则
说话人2 46:17
对不对？

一个班规则会有很多个版本，
说话人1 46:24
但是你这个周期还是要删完这一个版本的东西。
说话人2 46:29
是的。
说话人1 46:32
我再假设假设你现在是你开始轮巡，比如说你10秒轮巡一次，10秒执行一次，结果你现在是单机，单机删它这个规则已经到了非常大的一个规则，1,000万级别的规则了，

你单机也删不完了，单机一天都能上不完，你怎么能保证他一天上完？
说话人3 46:56
可以。
说话人2 47:06
单机删不完的话，再设置一个时间，就是到白天的时候正常正常该有业务进来的时候，就去终止删除操作，
说话人1 47:29
为什么要终止？
说话人2 47:31
因为它删的话它可能会影响业务的性能，调用这个规则引擎的性能，但是
说话人1 47:38
你都删不完了，它只会越积越多。
说话人2 47:42
但是这个版本修改，它我们设计这么一个场景，就是它不会太经常的更改。
说话人1 47:52
好，我假设他就要现场修改，比如说入它的写入量要大于你的删除量，你现在我其实问题是你怎么能加快它的，你现在是单机删，
说话人2 48:13
单机
说话人1 48:14
删是有瓶颈的，你怎么能加错那叫多吉山
说话人2 48:19
集群，用ID的集群。
说话人1 48:23
瑞丽斯集群和瑞丽斯集群有什么关系？
说话人3 48:31
谁知合理的
说话人2 48:39
多级山的话，
说话人3 48:45
谁知
说话人2 48:52
每个机器负责一块的内容，可以给他就是编号，你要怎么分
说话人1 49:05
你怎么分呢？
说话人2 49:06
根据机器数和规则的数把它平均分，
说话人1 49:13
把它平均分，你就相当于我规则是不断在增加的。你怎么分？比如说我现在你应该有个规则ID对不对？对规则ID，但现在有10台机器，我先把它搞成简单版本，固定了之后10台机器，你现在要分你怎么分？
说话人2 49:35
用一个类似快照的机制，先把当前之前的冗余删掉，然后后面的再进行一次这种操作。

因为现在的场景是挂掉了，他好长时间没启动。
说话人1 49:55
没事，我们现在不考虑bug的情况，就正常的你现在有一堆的，因为你现在假设的场景是写大于删

不挂掉的场景下，你删的也慢，

关键现在是别人现在就有100万条规则，然后你有10台机器你要怎么分？
说话人2 50:22
那就留两台出来用来写9，剩下的8台用来删。
说话人1 50:30
好，上海吧台你怎么来分工的？他不是删除了吗？
说话人2 50:41
还是一个类似快照？删一批，然后等这批删完了再来出发，下一批是
说话人1 50:50
可以，只不过说你这8个机器我总要知道分工，我一起删我怎么删，我删哪些，
说话人2 50:59
通过快照把这些规则ID就是分出来，然后从上到下，比如00100~9分给分给第一台机器，然后10~19分给第二台机器去
说话人1 51:17
做好了这个快照，怎么怎么通知给，首先快照怎么生成？

再其次你这个规则你是手动的输给删除的进程还是怎么样？
说话人2 51:37
这个快照手动删除肯定是不太现实的，因为它因为他现在是写的操作量很大，

那就要通过机器去实现这么一个能力。

快照的话，
说话人3 52:04
谁知
说话人2 52:07
快照的话，那就把整个入ID记录下来，八零几到几，就是寻便利一遍，就是便利一遍入ID就可以了。
说话人3 52:19
分钱，
说话人1 52:20
然后你怎么分？你怎么告诉其中一台删除的进程，我要杀哪些？
说话人3 52:33
谢谢。
说话人2 52:36
通过管道，
说话人1 52:40
管道是机器单机的概念，过去的话
说话人2 52:45
一个mq
说话人1 52:49
通过mq是吧？
说话人2 52:51
因为它 Http的话可能也行，因为它每台机器都发一遍就行
说话人1 53:01
了，每台机器
说话人3 53:02
都发一遍。
说话人1 53:03
是可以，但是也没问题，你现在要怎么做？你不是还有有机器在分吗？我这个任务要分，你找谁分？招生费，
说话人2 53:24
不找一个leader跟

搞一个leader的概念，由leader来分配任务，分给每台机器，
说话人1 53:37
分给每台机器，然后用HTTP的方式分给他。
说话人2 53:41
对，
说话人1 53:44
有个问题 Http，我调用的时候，比如分任务分完任务以后，本来这个任务应该是很大的，

我可能一可能一这一个任务要删除，10万个账号都有可能10万个就这个规则，但这个APP一直等他删完了再回包吗？还是怎么样？对，

异步怎么实现异步呢？
说话人2 54:23
他首先APP传到了之后，先发送一个确认机制，相当于告诉他我这个消息发到了。
说话人1 54:33
好，
说话人2 54:34
然后再等这台机器删完了之后，再一步的调用HTTP，发送一个消息告诉leader说我删完了，然后就可以接下个任务了。

这样
说话人1 54:53
你有必要告诉他12万信这个东西。
说话人2 55:01
应该有，因为如果不告诉他的话，下个任务来了他还在删，

或者就给他加一个工作队列，就是把leader给他的任务丢到工作队列里面去，
说话人1 55:18
这个队列是啥？
说话人2 55:24
这个队列就是要删除的数据的uid
说话人1 55:30
可以，但是这个队列你要用什么实现呢？
说话人2 55:36
什么实现？是指数据结构吗？还是？
说话人1 55:40
不是，你要自己写一个，你队列是拿个例子再存一个队列，然后还是怎么样要搞
说话人2 55:55
用Java来实现，用Java里面
说话人1 56:04
自带的实现，这样的话不是一重启就没了吗？
说话人2 56:07
还要考虑重启。

那就再来一个
说话人1 56:17
日志，日志也不是不行，但是你日志你重启，然后你手动给它恢复，
说话人2 56:27
不根据日志里面的内容一一一行回复。
说话人1 56:35
你简历不都写了卡夫卡了吗？你怎么不用卡夫卡了？
说话人2 56:44
因为我们卡用得很简单，就是他一个用了用的是广播的能力吗？
说话人3 56:52
广播
说话人1 56:53
的能力是怎么个解释法？
说话人2 56:56
用HTTP的话它发到每一台服务器上，就是要 HTTP更多的是点对点的通信，然后卡夫卡的话他就有一个广播的能力，然后消费者去消费就可以了，
说话人1 57:11
你知道卡不卡他最多能接多少个卡修门吗？

所谓的港你所谓的广播就是多个卡收款去消费它，消费者一个topic最多能多少个卡车板我
说话人2 57:27
不知道，因为我们服务器就5
说话人1 57:30
台。
说话人3 57:32
 Ok
说话人1 57:34
看起来做的比较简单，这个东西你们都应该是初期阶段对吧？
说话人2 57:38
对是的，
说话人1 57:39
好，我这边应该暂时没什么问题了，你还有什么问题没？
说话人2 57:46
好的，有的您好面试官，我首先请问一下您今天面试感觉怎么样？
说话人1 57:55
还我感觉你表达能力挺好的，不过这个项目实习的还是有点短，而且感觉比较简单。
说话人2 58:05
是的，它还有一些功能我没有说，
说话人1 58:09
不过其实重点考察还是其实搞一个大概就知道了。

好，你继续还有什么别的问题？
说话人2 58:16
还有我大概什么时候能知道面试的结果，
说话人1 58:22
应该这周这周五就是下周应该下周之前肯定能知道。下周二三应该都有。
说话人2 58:34
好的，
说话人1 58:36
还有别的问题吗？
说话人2 58:38
请问一下我刚才的说的方案还可以吗？
说话人1 58:46
还是不太行，你说的是版本管理，咱们最后讨论的深入那个方案吗？对。

方案上是这么走的，而我也是一步一步往你那个方向引导的，只不过你最后说APP那个东西的话实际上太过复杂了，其实用一个卡夫卡就搞定了。
说话人2 59:09
是我一开始也想的是卡夫卡，但是我想到它是传的是不同的入ID，然后他用HTTP的话也不存在数据不一致的
说话人1 59:20
问题。倒不是你刚才不是也说了重启就没了。

卡夫卡创新你还是在
说话人2 59:27
的，它有持久化对。
说话人3 59:30
对，
说话人1 59:32
这种题我觉得你可以回去多多看一下，想想。然后后边的困，其实你这个东西最终还是想做大，做大的话你你看后边要怎么做，虽然你没有做，但是你可以知道怎么做，虽然你没有真正的去做。
说话人2 59:52
好的。
说话人1 59:54
还有什么问题？
说话人2 59:56
没有了。
说话人1 59:59
行行，没有的话咱们今天先这样，
说话人2 01:00:01
好的，谢谢面试官。
说话人3 01:00:06
拜拜。我操。

谁知
