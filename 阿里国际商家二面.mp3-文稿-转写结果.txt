阿里国际商家二面.mp3
说话人1 00:02
16年到20年在长安大学读的是本科对吧？然后是21年到24年两年半的时间在波士顿大学读硕士对吧？对。这里面第一个问题就是本科毕业到硕士读硕士之间好像有概括的一年多对吧？这个是是自己去发展是去准备吗？还是什么原因？
说话人2 00:24
对是的，一开始是在备考国内的研究生，但是国内的研究生被调剂了，去了我不想去的学校，然后就没有去准备
说话人3 00:36
考
说话人2 00:36
申请国外的研究生。
说话人1 00:40
花了一年时间准备是吧？对。

这一年时间完全是在准备吗？还是说有在工作边看？
说话人2 00:52
因为他考研的时间他出分是是在2月多就2月多出来之后，发现结果不太好，然后后面就在准备申请，然后就在学语言。
说话人1 01:06
好的，一直在准备，然后1月份毕业的话，到现在是在哪家公司工作？
说话人2 01:18
现在目前没有工作再找机会。
说话人1 01:23
目前没有我们是吧？医院到现在是什么原因？是自己有发生身休息了一段时间，还是说一直没有好的一个工作机会？
说话人2 01:39
对，1月毕业了之后出去先旅游了一下，休息了一下，之前然后中间这段时间就在准备申请博士，但是就是因为家里的一些原因，然后跟家里商量了一下，然后就打算就不申请博士了，就在国内找班找个工作开始工作。
说话人1 02:03
你后面还有打算继续去读博吗？
说话人2 02:07
没有。
说话人1 02:09
就确定了是吧？对。你是几月份开始就是说做了一个决定，就不申博，然后开始去找工作？
说话人2 02:21
最近七八月份的时候。
说话人1 02:25
七八月份对。Ok，你现在应该花了一点时间，大概一两个月去工作，现在其他公司的现在面试进展怎么样？
说话人2 02:39
是有一些在面试的，然后有一个offer是
说话人1 02:45
哪个公司offer你拿到了？
说话人2 02:47
是北京的一个小公司。
说话人1 02:50
北京的小公司是吧？Ok我理解就是说因为你这个不是波士顿大学，应该QS是100对吧？

前100对整个学历毕竟还是不错的，这个好像offer现在拿的不是特别顺利，是不是？
说话人2 03:13
是的，因为有几个还在流程里面，
说话人1 03:17
还有哪几个在流程里面，
说话人3 03:20
什么
说话人1 03:22
偶尔还有哪些公司，你还跟着面的
说话人2 03:25
有字节，然后有腾讯，然后还有蚂蚁，
说话人1 03:33
现在有就到后面的接近下面，或者是在开始谈薪资这一块了吗？
说话人2 03:38
暂时没有，都在差不多二面这样子一
说话人1 03:44
二面是吧？对。
说话人2 03:45
Ok。因为我是8月多开始投的，然后他流程有的也比较长，
说话人1 03:54
理解你这个工作地点你现在是没有什么倾向对吧？哪里都可以。
说话人2 04:00
请问您是在哪里？
说话人1 04:03
在杭州，
说话人2 04:03
我就是倾向于杭州。
说话人1 04:07
倾向于杭州，好的，我看你简历里面写的在唯品会实习了一段时间，还有一个是

二3年是硕士毕业之前去实习的是吧？对。

Ok实习之后实习我没有选择在唯品会留下来吗？
说话人2 04:32
他提供了转正，但是我不想留在天津，我想留在杭州。

江浙沪这边我是想留在江浙沪这边，然后江浙沪这边杭州是第一首选第一选择。
说话人1 04:46
好的，了解。
说话人2 04:52
所以我投的阿里系就比较多。
说话人1 04:56
好的了解。对，然后编程语言的话，你刚才说了你得花点时间去学编程对不对？编程语言，然后对这一块就是Java的一个熟悉程度，现在怎么样？
说话人2 05:08
熟悉程度
说话人1 05:11
还可以，在唯品会的话是用Java来做的对吧？

你先给我介绍一下你在唯品会里面主要做了什么。
说话人2 05:20
好的，我们那个项目主要是一个我先讲一下它的业务背景，然后它的业务背景，我们做的是一个规则引擎，然后它设计的初衷就是为了把复杂多变的规则从硬编码里解放出来，然后用规则脚本的形式存放在文件或者数据库里面，然后规则的变更就不需要修改代码就可以使用了，然后这样就可以做到的比较高程度的灵活性。

然后这个规则引擎它是一个独立于业务系统的模块，然后他会负责一些规则的计算，然后包括有一些积分系统或者告警系统，他都会去实现这么一个逻辑复杂的这么一种组合。然后在有这个规则引擎之前，我们对接的那些系统没有对接的系统，他们那些本身的系统，他自己去实现一些逻辑比较复杂的

代码块，它维护起来就比较困难。

然后在有规则引擎之前都是各个平台他自己去玩，然后他有了规则引擎之后，我们就会把他们这些

这些这一部分抽到规则引擎系统里面来，然后让他们来对接我们，然后他们就不用关心底层的实现了。

然后这个规则引擎它解决的就是一个复杂规则，它的各种组合，然后包括还有高频的这种规则的修改，然后它应用的场景，比如说有积分系统，然后这个积分系统如果要把积分计算的逻辑，把积分计算的逻辑和业务规则它抽象出来，然后分装，然后这样的话系统就能够基于这些规则，它自动的进行积分计算和管理。

比如消费规则满100的就积一分，然后积分系统就会监听用户的交易发生了之后，规则引擎就会根据匹配到的规则和事实数据去进行一些积分计算，然后积分计算完之后，完了之后会更新一些用户的积分余额，然后去记录一些积分变动的信息。
说话人1 07:33
好的，你们这个积分系统它不是具备了你们这个规则平台，规则中心我规则一些，你们如果说要去变动规则的话，是去你们的规则是配的代码库里面的，比如工程里面还是说是一个配置平台的配置？
说话人2 07:52
这个是在数据库里面的，然后我们会去动态的从库里面抽取一些，它有4张表跟规则相关的，有规则表，规则表关联的、有属性、有因子有动作，然后他会去根据这些表去查，然后拼接成一条规则。
说话人1 08:13
 Ok，也就是说你们是把那个规则写到表里面去，然后执行的时候从表里面读出来再去执行对吧？
说话人2 08:20
对，然后我们只是完成了这么一个功能，然后他具体去配置这个规则的话，不是由我们来完成的，是由

业务模块他们自己去调用我们这个规则引擎，我们会提供给他们一个可视化界面，然后他们会通过一些比如这里填个属性年龄，然后中间会有大于小于，然后这边会有值，然后它去根据这么一个页面去去配置规则，
说话人4 08:52
我
说话人1 08:52
理解。

你们这个规则就是说规则就是上游的业务系统有可能会变对吧？有可能会变有可能会更新，但是你们去做规则执行的时候，你们是每次都做数据库实时查询规则，还是会去做一些比如缓存之类的去提升性能，
说话人2 09:11
我们是有缓存的，通过用rds然后它有一些预热，它每次启动的时候会去把一些热点数据放到 release里面，然后它刚启动的时候服务打过来就可能会比较快的响应。
说话人4 09:27
对。
说话人1 09:30
好的，这里面就是说如果下游上游的业务规则更新了，你们这个是从什么机制来保证，就是说你们保存的数据不一致的？
说话人2 09:41
这个是有一个规则的动态加载，然后这也是我们一个功能。然后它首先我们会连到数据库，然后设计好数据表，然后会把规则的配置存到表里面，然后在程序运行的时候，我们就可以

调用一个重新加载的接口reload，然后来进行动态的加载。

然后再调用reload的时候，首先会通过一个叫key reporter的仓库从DB里面去加载所有的规则，然后拿到规则之后，通过一个主要是它里面自带的一个key service，然后来加载规则，然后加载完成之后会把数据放到我们内存的文件系统里面，通过一个KFC，然后去构建一个keep builder，然后通过一个某个方法，然后会去构建一个虚拟的文件，然后自动去构建一个题目。

然后检查文件的时候，如果存在错误就抛出异常，如果没有错误的话就会构建一个key container，然后会去把原来的container给替换掉，然后这样的话我们容器里面就放的是我们数据库最新的数据，然后我们就实现了一个从数据库里面动态加载的这么一个过程。
说话人1 10:56
好的，您这个过程我听了一下，我想核心再想确认一下，就是说因为你刚才说就是说你们这个是一个底层的服务，然后上游交给业务系统去自己去做这个规则的变更和变更，跟规则的调用的对不对？

然后这里面就是说规则变更之后如何，因为你们这个规则已经我理解一个持续性的运行的服务对吧？可能不不断的有规则，现阶段有规则有变更，那就是说你们是什么时间触发这个规则变更，就是你们怎么感觉到这个规则是有变更的？
说话人2 11:34
变更通过什么让
说话人5 11:39
我想一下。
说话人2 11:50
我记得是前端，就是在前端会有一个他会写一条规则进来，然后我们会展示一个他有没有写完，是他协调规则会申请，然后他如果我们这边还没有校验通过的话，就会给他展示一个处理中。

然后他如果如果过长时间都没有返回处理成功的话，它就要重新去配一条什么数据的一个规则，然后发到我们的系统里面来。
说话人1 12:32
也就是说你们是每次都有相当调用是吧？我调过去给你规则了，你们是把所有的规则都缓存起来了吗？还是说有一部分
说话人2 12:45
只是一部分是这个是由业务人员来负责的。这个不是我们来配置的。
说话人1 12:51
缓存也是业务来配置的吗？
说话人3 12:54
是的。
说话人2 12:55
这不对，这个不是是热点数据它会加载到release里面吗？会根据
说话人1 13:01
怎么你们的热点数据逻辑是怎么处理的，
说话人2 13:07
是加载超过最近被频繁调用的一些数据。
说话人1 13:15
Are you是吧？
说话人3 13:17
对，
说话人2 13:18
ll知道的，
说话人1 13:20
你们那个策略是llu对吧？有一个固定的固定时间，如果最好多长时间没有备用就会自动过期，是这意思吧？

对是的。好的，说到这点，如果说我们用Java的一个API去实现一个aru一个典型的aru我们应该怎么去做？
说话人2 13:47
用map你
说话人1 13:50
能给我说一下逻辑吗？
说话人2 13:57
请问能具体一点吗？
说话人1 14:01
就是从 Java不是提供了一些集合类对吧？

有列表的，数组集合的列表集合的，包括 MAC集合，还有什么其他的一些可能，比如说我们通过这些集合能够去实现一个LV的缓存的容器，

这里面 lu的策略可以自己定义，但是就是说我们如果让你来去想一想，结合lu的特点，然后我们Java是集合框架里面的一些特点，你觉得怎么去比较合适的去给实现出来？
说话人2 14:46
首先需要去定义一个 ll的大小，
说话人1 14:52
这个都可以没关系。
说话人2 14:54
定义一个大小之后，通过用数组或者链表，通过用数组或者链表放入最近的这个程序，只要进程只要这个线程只要运行了，就把它放到链表里面去。

然后遍历链表，然后从

还需要一个东西来存一下，最近有哪些进程，然后遍历一下容器，把链表里面没有的进程从页框或者页面里面替换出去，
说话人1 15:53
你能跟我说ll它的一个

更新机制，我们可以重新去从lru它的本身的定义，然后再去看一下就是说我们那个容器里面到底是哪些东西可以天然的去实现 lru
说话人2 16:18
 lru它应该是最近最少使用算法，

然后它首先会有一个进程编号，然后根据进程编号，它会有最近调用的次数，什么
说话人1 16:34
叫进程编号？

就是
说话人2 16:37
程序技术，就是程序每个程序都会有一个
说话人1 16:44
不应该叫竞争点好吧，因为我们前面就是一个数据，没有什么竞争的概念，
说话人2 16:49
好的就会有这么一个数据，

然后这个数据肯定是有编号的，

然后我们会根据这个编号会去把它最近它只要被用过一次就会往它对应的，相当于剑指对吧？

K value往它的 value里面，value存的是它最近调用次数，然后 value去加一，
说话人3 17:18
然后
说话人2 17:19
等下一个数据不在内存里面的时候，我们就会去遍历 map，然后把 value最小的这么一个数据给它替换出去，

大概是这么一个逻辑。
说话人1 17:48
如果这个逻辑的话，我们 Java的如果是这个东西，如果说它是要两两存两个类型的数据，那么肯定是一个map结果对吧？不能是一个数字。
说话人2 17:59
对是个map结构，
说话人1 18:03
能够实现迈克要实现推进这种使用的一个淘汰机制的话，
说话人4 18:08
这
说话人1 18:09
是如果我希望你可以制造出来一个实现，也许不是最完美的，但是有个逻辑就可以。没问题。这样能够讲清楚吗？
说话人2 19:10
有点模糊，我做过类似的题，请问能给一个具体的题，
说话人1 19:18
你什么意思？
说话人2 19:20
可以把它的编号数据它的某个编号给出来，然后通过用

算法的形式把它写出来。
说话人1 19:41
好的，你可以再想一想，如果你等下想想到了我们可以再聊，我先把这个问题先先暂停一下，先终止到这，我们后面再聊聊其他的。在Java里面我们要去实现一个概念应该怎么评估？
说话人2 19:59
在Java里面实现单例有两种一般，一个是懒汉，一个是恶汉。

然后他懒汉和饿汉他首先是懒汉，它有一个资源加资源浪费的问题，然后它是在类加载的时候直接创建对象，然后初始化单例对象，
说话人3 20:20
然后
说话人2 20:22
如果从代码上来说的话， class里面有一个private，然后对象是私有的，然后会有一个 stick的一个

 instance，

你有一个新的对象，然后把它赋值给 instance，然后提供一个公共的接口来return instance，然后也还有一个对恶汉，然后他是比较懒，顾名思义他比较懒，其实是一个懒加载，然后他在第一次被使用的时候才会被初始化。

然后首先创建一个私有的构造方法，防止其他调用的地方直接拗这个对象，让创建出来的对象就不是单例对象了，然后创建一个私有的变量来保存代理对象，然后再提供一个公共的方法去返回代理对象。

然后他还有几个问题，首先他必须要加我的菜，
说话人3 21:30
然后
说话人2 21:31
他回复太阳是为了解决可见性的问题，还有一个是为了防止指令重排序，

如果不加volte的话，比如说有一个线程一在执行到构造方法的时候，可能就会指令重排序，然后在创建内存空间之后，先把内存地址赋给实例对象，然后再在内存空间里面初始化对象，然后这个时候线程二来了，然后判断实例的对象是是不是闹，然后但是这个时候线程一它还没有把对象给实例化完，然后这个时候线程二可能就会得到一个实例化一半的对象，然后这个时候可能就会导致线程出错，所以懒汉他一定要加包菜，
说话人1 22:23
唯一是你妈的所有的，不好意思，
说话人2 22:25
我刚才没听到刚才没有声音，
说话人1 22:29
不好意思我把耳机拿掉，反正没电了。

你好可以听见吗？
说话人2 22:35
可以。
说话人1 22:38
专利模式的我们知道就是说在整个 Java容器里面，就是所有的执行上下文都只有一个对象应用对吧？这个时候我们会在实践里面有一个原则就是说我们在单一对象里面不能让这个对象有属性，有它的实际属性。

你可以给我讲，我们说一下你的理解为什么会有这种要求，说一个单位对象里面不能有私有的成员变量，
说话人2 23:12
私有的它应该是防止其他的地方直接拗对象，
说话人1 23:24
直接因为单一对象你是没法让它溜的，我们可以控制起来，比如说把构造函数私有化起来，
说话人2 23:33
我的理解

他不能这么干，首先
说话人5 23:44
肯定是有问题的，那问题他会在创建的时候，
说话人2 23:58
不好意思可能不太了解。
说话人1 24:02
我可以稍微提醒一下，就是说

因为单位对象所有的线程引用的都是同一个对象，对不对？对。如果都是调控对象，这个对象，它有一个成员变量就意味着什么？就意味着所有的限产持有的都是
说话人2 24:25
同一个对象，同一个对象的一个对象
说话人1 24:28
里面的属性，
说话人2 24:29
对同一个对象
说话人1 24:31
同一个对象属性会带来什么问题，
说话人2 24:34
可能会有线程不安全的。
说话人1 24:37
对，因为现成数据会错乱对不对？因为就是说这个数据不是我现成的私有的，是全局共享的，我改变我这个数据其实会影响到其他行程执行对不对？对是的对吧？这个就是现在安全的问题，所以我们就是说如果你是有局部变量，你这个就不能实施代理，你必须要每次创建新的对象出来对吧？对。好的，我提醒到这后面还有问题，就是说如果说我们现在说有这个问题，然后恰好某个人他就写了这种情况，我们如果对要修复这种问题，你觉得怎么去做？

来去解决现场这个问题？
说话人2 25:18
我觉得可以在前面加CQ nice的这么一个关键字，然后它加了CQ nice的，它是一个重量级锁，然后它能保证这个线程被修改了，它其他的线程可见，然后它还能保证有序，它不会让指令重排序。然后差不多就是这样，
说话人1 25:42
我们就是说在通过手段技术来保证线程执行的有序，对吧？

锁的话，我们除了生物拉斯的内置锁之外，我们还有Java77k的直接可以提供的其他的锁，比如人可是

他们这些所有什么区别吗？
说话人2 26:00
好的，首先synchronize的它是一个重量级锁，然后 Reaction log它是一个可重入锁，然后它支持公频锁和非公频锁，然后它也原来是log，它好像是通过eqs来维护一个组色队列。

然后新空单词和log， c空nice它是关键字，然后它是用c加加实现的好像，然后 log它是由Java来实现的，然后新扩nice的，它是会自动释放同步块里面的锁，然后用log的话，它需要用Outlook来手动释放锁，然后它们两个都属于悲观，所，然后然后log它还提供了一些c空纳斯没有的功能，比如有公屏锁，然后有可打断或者可超时，然后洛克它还有一些其他的实现类，
说话人3 26:58
对
说话人2 26:59
有一些其他的实现。

比如人家说log，还有一些 reaction like read write，lock，然后

性能的话是 sinks它做了一些优化，然后它会有一些所升级的概念，就比如有偏向锁轻量级锁，然后有重量级锁，然后它的性能就会还不错。

然后在锁竞争激烈的时候， lock的话可能会提供好一点的性能。
说话人1 27:30
好的，去除了我说的锁之外，还有什么方式可以解决行车安全？
说话人2 27:39
或者用flag，logo，
说话人1 27:44
首先logo它它内部是通过什么结构去保存现成的上下文数据的？
说话人2 27:51
所有的local应该是一个friend local map类型的成员变量，然后是把所有路口自己作为key，然后把资源作为value放到 map里面，
说话人1 28:07
所以包括它内部的map，它的 k的引用类型是哪一种你知道吗？
说话人2 28:15
是弱引用。我不太清楚，
说话人1 28:20
你知道在外有几种引用，
说话人2 28:23
有强引用，有弱引用，还有需引用，还有还有一个什么来着？还有一个
说话人1 28:35
引用和
说话人2 28:37
软引用，
说话人1 28:39
这几种引用一般情况我们不会用对吧？一般都是正常情况下引用，其他引用的他们一般是什么场景会用或者怎么去创建出来，你了解过吗？
说话人2 28:49
就是弱引用不对，软引用软引用它就是首先一个对象它有用，但是它不是必须的，然后它内存空间足够的时候， GC它不会回收它，然后在内存空间不够的时候，GC它就会在om之前去把它回收掉，然后如果引用它就是一个这个对象可能有用，但不是必须然后GC它一旦发现了，它是个弱引弱引用它一定会被回收，然后不管它内存空间是不是足够，然后信用就是一个对象，它没用了，然后它所有的时候都可以被回收掉。
说话人1 29:25
Ok，我们如果去Java实现一个对象的深拷贝，应该怎么
说话人2 29:40
去实现一个深拷贝的话，省拷贝就是

两拷贝会完全复制整个对象，然后包括对象里面包含的内部对象，

要去深拷贝，要去堆里面重新分配，

重新声明一块内存，然后把这块的内存复制给把之前的那块内容复制到新的内存里面去。
说话人1 30:20
从内存的操作来说，可以这么去看具体实现怎么样怎么做，
说话人2 30:26
具体时间我有点忘记了。
说话人1 30:32
 Ok你在实习阶段对这一块你收获是有什么？技术上的收获没有？
说话人2 30:45
好的，这块我觉得收获还是蛮多的。首先我在学校里面的项目它不会是一个很大的项目，然后它就是一个单独的模块，然后

但是在公司里面这个项目的话，它可能会跟其他的模块之间有一些交互，然后有一些通信，然后我自己完成的也是某一个小模块。

然后我知道了在Java里面他
说话人5 31:14
可以我
说话人2 31:17
该怎么表达他还能这么干。

然后还有包括

我们做这个东西，我参加了他们的讨论，他们讨论我一开始因为没有什么经验，也说不上话，只能听他们在讨论，然后他们就会讨论一些包括应用架构之类的架构，然后还有业务架构，或者还有一些部署架构方面架构方面的问题，然后应用架构就是他给我们做了一个服务拆分，然后他们也讨论了为什么要做服务拆分，

然后他其实也可以不做服务拆分，但是他们的最后讨论的结果就是去做了一个服务拆分，然后还有一些比如工厂模式在这个项目里面的应用，然后包括我们有一个规则的解析，它是用了一个工厂模式的思想去完成的模块的内容，包括还有一些线上有一些并发的问题，我做的模块有一些并发的问题，但是我并发我的问题，我的那些并发度不高，所以我用的很简单，就是用了一个cscs的思想
说话人3 32:34
来
说话人2 32:34
解决了这些问题，

其实收获还是蛮多的，但是我目前只能想起来这些了。
说话人1 32:44
你说的这些确实很多，但是都比较泛化，有没有你觉得对你来说是一个比较大的影响的收获？
说话人2 32:58
我觉得架构我以前来去写代码，更多的是从学生的思维，以前也不是面向对象，就是一个函数从头写到尾，然后它就结束了。然后在这个公司里面它会把一些服务做一些拆分，然后去做一些代码上面的解耦，然后解耦了之后，这些代码可能就比较好负责维护，比如还负责扩展，然后这一块出了问题就直接可以去找这一块来改，然后就不用去管业务上的有什么问题，

其实给我的思路上的改变

提升扩展还是挺扩展了我的思维，我以前还不知道能这么干。
说话人1 33:50
好的，我们在我们在Linux操作系统里面，我们要去查看服务器的一些状态，我们比如说要看整个进程运行的一个负载情况，应该用什么命令来看？
说话人2 34:05
我不太懂Linux，不好意思，
说话人1 34:09
你的专业不学这个吗？
说话人2 34:12
没学过。
说话人1 34:15
也学过是吧？
说话人2 34:18
对，
说话人1 34:19
你硕士学的计算机信息系统主要学什么？
说话人2 34:27
他很多包括有学Java，有学Python，然后有学有学外部，然后还有一些理论课，还有一些Java的基础，不管是什么的基础，我选的语言是Java，然后他会教一些数据结构算法，
说话人1 34:48
你这个硕士正学年是正常的，我感觉有点久，现在不是正常，一两年就学完了。
说话人2 34:55
我那个是三年，但是

我是提前修完了，
说话人1 35:06
三年现在还美国这边还是三年这么久，
说话人2 35:10
有三年的，有两年的，一有一年的，然后我修的，
说话人1 35:16
但是我感觉你这个都是偏应用方向的，对
说话人2 35:20
吧？对是的。
说话人1 35:22
应用反应正常来说都是比较快一点的，一两年的这种
说话人2 35:26
我不太清楚，但是他们设计的就是
说话人1 35:31
设计就三年是吧？

对，
说话人2 35:35
然后有一些理论课，然后一学期也没有碰代码，
说话人3 35:39
就
说话人2 35:41
有些理论课就也没有应用上面的东西，

然后就会写一些论文什么的，然后这些论文
说话人1 35:55
你发了论文了
说话人2 35:56
没有？只是作业。
说话人1 36:00
你们毕业不要求发论文是吧？是的，也没有参加过一些编程竞赛，
说话人2 36:11
没有之前去海口上玩了一下，然后也没什么成果。
说话人1 36:16
Ok，你觉得你本科的专业成绩怎么样？
说话人2 36:26
然后本科的专业成绩

一般前50%，本科没有再好好学习，因为

然后研究生之后就感觉不太行，然后需要好好学一下，然后研究生成绩就还可以。
说话人1 36:41
这个成绩大概能够排名的话大概是多少？
说话人2 36:46
研究生吗？

我觉得应该有前10%，因为我有很多课都是a
说话人4 36:54
这样
说话人1 36:54
是吧？

好的，你这边对现在大语言模型这种这门技术有了解吗？
说话人2 37:12
这个不了解，请问我们会做这一块吗？
说话人1 37:19
对，因为但是这个是现在技术的一个趋势，对吧？我们会很多接触到元宝现在出各种各样的事情。完全没有了解是吧？
说话人5 37:31
是的，
说话人2 37:33
因为我在准备面试都在背背8股什么的。
说话人1 37:41
好的，英语怎么样？英语应该不错，
说话人2 37:44
英语还可以，阅读文档没问题，然后简单对话也没问题。
说话人1 37:51
你能用进去简单介绍一下你们的学校
说话人3 37:56
吗？
说话人2 38:02
这种介绍型的可能不太行，我需要先写个稿子，就是写稿子应该也没问题，
说话人1 38:09
当时也所以就是说叫什么？听说好像稍微差点，然后读写强一点对吧？
说话人5 38:17
对
说话人1 38:22
好的，行，我看你spring应该有了解， Spring有没有了解？
说话人2 38:28
 Spring有一些了解，
说话人1 38:31
你的surprise最大优点是什么？
说话人2 38:35
我觉得spring它首先是有一些优点，但是它bring它不如spring，boot好用。

然后它spring它有一些包括 LC和LP，首先是它的

最出名最广泛最
说话人3 38:54
普遍，
说话人2 38:55
反正就是最广为人知的某两种优点。

然后LC它是控制反转，然后它他就是我们在使用spring的时候，他可能会要先建一些类，比如us service，然后他会用一些注解，比如说to where然后在程序运行的时候用的是具体的user service对象，但是我们程序员只写了类，然后这些对象的创建，包括对象里面属性的赋值，它都是通过spring来帮我们做的，然后控制，然后它反转是因为我们就是自己控制对象的创建和对象属性的赋值，没有spring的时候，但有了spring之后，这两件事就不用我们做了，然后我们只需要自己定义类，然后这些属性的赋值就由spring交给spring来完成了。

然后用了这个的话，它可能会简化一些，

简化一些，就是减少很多代码量。

但是交给spring了之后，我们就不需要来关心这些东西。如果没有的话，如果类再多一点，然后类里面的属性再多一点，那么就代码会很多，然后这个逻辑也很复杂，然后我们维护起来也比较困难。

然后您说
说话人1 40:17
你刚才说spring boot比spring更好用对吧？你觉得spring boot相对spring它的优点是什么？
说话人2 40:27
 Spring boot，因为我们配置也不需要自己，也不需要我们来配置，是有其他人配置好的，但是在用的时候，我自己写一些练习项目的时候，就会发现 spring他要去配置很多东西，它要有一些什么叉庙配置，然后还有一些什么包括proper的配置，还有它里面还有反正它里面要设置的东西有很多，一步一步设下来，可能半天就没了，然后用split的话，它会自动的帮我们去管这些事情，然后他加一些注解就可以了，非常的方便。
说话人1 41:11
好的，你有没有研究过就是说

自己去构造一个私人的组件，让其他人用这个组件可以快速的去做到开箱即用？
说话人2 41:26
我没有考虑过，我之前看了一个教程是

打算去试一下，是一个实现一个编译器，但是还没开始动。
说话人1 41:38
还没来得及搞是吧？对好的。你觉得从技术角度来说，你的强项是什么？
说话人2 41:51
我的强项就是因为是科班出身，所以
说话人5 41:55
他
说话人2 41:57
一些代码上面的东西就不如就比那些非科班的要强，

我底层的原理差不多都知道，所以包括一些新东西的话，他可能上手也会比较快一点。

然后包括你
说话人1 42:16
的弱项是什么？
说话人2 42:17
之前的应用弱项，我可能不太擅长跟人打交道，
说话人1 42:26
你的性格
说话人2 42:30
是吧？可能还行，也可能不太行，我也不太确定你们。

然后包括交给我的事情，我可能因为性格上的一些原因可能有强迫症，然后他给我的事情我可能搞不定的话，我就必须要想办法把它搞定，然后可能会有这种强迫性的好
说话人1 42:56
的，你跟你同学相处的
说话人2 43:01
都还可以。
说话人1 43:06
对，我没有问题了，有没有什么问题要跟我反馈一下？
说话人2 43:10
好的，请问一下这次面试您对我的感觉怎么样？
说话人1 43:18
感觉还行，但是也有一些地方我觉得也可以去改进，

但是还是要去综合去看分析一下，推动你的一些优势，然后你面试上可能觉得存在的一些稍微短一点的短等等，然后会综合起来去做一个考虑。
说话人2 43:43
好的，了解，请问

这个结果大概什么时候能有一个反馈？
说话人1 43:53
我们正常2~3两三个工作日就能有反馈了，对，如果两三个工作日我们讨论之后觉得没问题，应该就是在两三个工作日会约你坐下来面试。如果我们觉得可能暂时不太合适，我们也可能会在就是说

最多一一周会有就是说一个邮件通知，对，大概是流程。
说话人2 44:15
好的，请问一共有几轮面试？
说话人1 44:19
加上这一轮的话，后面就有两轮就是加一个技术主管和一个 hr，但是他们两个有可能一起面对。
说话人2 44:28
好，了解了，请请问一下我们这个部门的话之后的业务方向会是什么？
说话人1 44:38
我们这个部门是阿里公司集团的一个业务单元，是按icbu阿阿里巴巴到com，就是做全球的跨境b to b电商业务的，然后这是一个大业务范畴，然后这里面有一个是b to b的，一个是电商，一个是全球化的，基本上是组合起来就是我们的业务模式。

然后这里面就会涉及到电商里面商家、买家、商品，你包括交易履约、担保支付，以及什么像一些风控合规等等的一些这些业务单元，这些业务模式在我们这里都会有。

大的我们这个部门是主要做商家领域的，商家领域就是说解决商家的入驻，商家的留存，解决这个问题，以及商家怎么再提供一些更好用的产品工具一些工具，让商家在这里面能够去提升它的经营效率，降低它的经营成本，这个是我们作为商家团队要解决的问题，我这边是负责全球化这一块的，就是说在商家里面他也负责两块，一个负责国内的商家，一个负责国外全球化的商家。

国内商家就是中国的商家，因为中国商家之前一直是网站的一个底盘，就是说大我们之前的业务，但是大部分主要部分是中国商家，然后买家是全球买家，但是中国商家它现在已经到了瓶颈了，就增长瓶颈了，我们现在要把这个瓶颈再打开，那就是把全球化业务再去往上做一做，去把全球化的深度商家规模提升上来，现在主要就是在负责全球化的商家的引入，商家的留存，以及商品的商贩以及商品的前台运营，去把商家商品这件事情能够做得更好，去带来一些新的增长空间，这个是我们大致的一个业务范畴。
说话人2 46:20
好的，了解了，请问用到的技术栈会有哪些？
说话人1 46:27
技术栈的话一个就是Java相关的Java分布式Java的一些技术栈，比如Java核心技术，然后分布式的一些架构， Rpc消息缓存事物，对吧？然后容器层面就是一个是 sprint相关的，然后还有就是克拉尔相关的一些技术，这是Java层面。

另外一个就是说我们对数据和AI这一块也会有一些有一些涉猎，对吧？一个就是数据驱动能够去做一些数据分析，以及做一些数据归因相关性分析，去看一下就是说整体的

整个数据效果，包括从数据里面去洞察一些新的机会，这是数据层面，AI层面就是现在我们通过AI去做整个不管是业务层面的企业，还是整个公司层面的提效，我们通过去不断的去尝试去把整个从AI去改变整个商业模式，大概是做这么几件事情，几个进展。
说话人2 47:26
好的，了解了。

我这边没什么问题了。
说话人1 47:32
行，我们今天面试先到这好吧？后面就是说我们这边会讨论一下，如果有机会的话，我们会尽快通知，你好，好
说话人3 47:39
的。
说话人1 47:41
好的，先到这，好，
说话人2 47:42
谢谢您。
说话人1 47:43
拜拜。
